{"version":3,"file":"static/js/941.6c4f5d3b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { ErrorMessage, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n} from '@chakra-ui/react';\n\nconst PhonebookSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(5, 'At least 5 numbers')\n    .max(13, 'Too Long number!')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleSubmit = ({ name, number }) => {\n    if (contacts.find(contact => contact.number === number)) {\n      Notify.failure(`${number} is alredy in contacts`);\n      return;\n    }\n    const newUser = { name, number };\n    dispatch(addContact(newUser));\n  };\n\n  return (\n    <div>\n      <Box pl={60} pt={10}>\n        <Text fontFamily=\"heading\" fontSize={24} color=\"rgb(74, 59, 4)\">\n          Add your new contact\n        </Text>\n      </Box>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={PhonebookSchema}\n        onSubmit={(values, actions) => {\n          handleSubmit(values);\n          actions.resetForm();\n        }}\n      >\n        <Box pl={60} mt={10}>\n          <Form>\n            <FormControl>\n              <FormLabel color=\"rgb(74, 59, 4)\">Username</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                htmlSize={35}\n                width=\"auto\"\n                variant=\"flushed\"\n                focusBorderColor=\"rgb(74, 59, 4)\"\n                color=\"rgb(194, 152, 0)\"\n                fontSize={18}\n              />\n              <ErrorMessage name=\"name\" component=\"div\" />\n            </FormControl>\n            <FormControl>\n              <FormLabel color=\"rgb(74, 59, 4)\">Number</FormLabel>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                htmlSize={35}\n                width=\"auto\"\n                variant=\"flushed\"\n                focusBorderColor=\"rgb(74, 59, 4)\"\n                color=\"rgb(194, 152, 0)\"\n                fontSize={18}\n              />\n              <ErrorMessage name=\"number\" component=\"div\" />\n            </FormControl>\n            <Button type=\"submit\" colorScheme=\"blackAlpha\" variant=\"outline\">\n              Add contact\n            </Button>\n          </Form>\n        </Box>\n      </Formik>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;","import styled from \"styled-components\";\n\nexport const ItemsWrap = styled.div`\ndisplay: flex;\ngap: 10px;\n`;\n\nexport const Button = styled.button`\nwidth: fit-content;\nborder-radius: 3px;\nborder: 1px solid black;\nbackground-color: rgb(232, 250, 255);\n`;\n","import { List } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ItemsWrap } from 'components/ContactItem/ContactItem.styled';\nimport { selectVisibleItems } from 'redux/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, Text } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleItems);\n  const dispatch = useDispatch();\n  const onDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Box pl={60} mt={20}>\n      <Text fontFamily=\"heading\" fontSize={24} color=\"rgb(74, 59, 4)\">\n        Contacts\n      </Text>\n      <List>\n        {contacts.map(item => (\n          <li key={item.id}>\n            <ItemsWrap>\n              {item.name}: {item.number}\n              <button onClick={() => onDelete(item.id)}>Delete</button>\n            </ItemsWrap>\n          </li>\n        ))}\n      </List>\n    </Box>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n// import { FilterWrap, Input } from './Filter.styled';\nimport { changeFiltervalue } from 'redux/fIlterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { Box, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const onChangeContact = ({ target: { value } }) => {\n    dispatch(changeFiltervalue(value));\n  };\n\n  return (\n    <Box pl={60} pt={10}>\n      <FormControl>\n        <FormLabel fontFamily=\"heading\" fontSize={24} color=\"rgb(74, 59, 4)\">\n          Find contacts by name\n        </FormLabel>\n        <Input\n          type=\"text\"\n          value={filter}\n          onChange={onChangeContact}\n          htmlSize={35}\n          width=\"auto\"\n          variant=\"flushed\"\n          focusBorderColor=\"rgb(74, 59, 4)\"\n          color=\"rgb(194, 152, 0)\"\n          fontSize={18}\n          fontFamily=\"heading\"\n        />\n      </FormControl>\n    </Box>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport '../index.css';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex className=\"bg-register-image\" h=\"100vh\">\n      <ContactForm />\n      <Flex flexDirection=\"column\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Flex>\n    </Flex>\n  );\n}\n"],"names":["PhonebookSchema","Yup","shape","name","min","max","required","number","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsxs","children","_jsx","Box","pl","pt","Text","fontFamily","fontSize","color","Formik","initialValues","validationSchema","onSubmit","values","actions","_ref","find","contact","Notify","concat","newUser","addContact","handleSubmit","resetForm","mt","Form","FormControl","FormLabel","Input","type","htmlSize","width","variant","focusBorderColor","ErrorMessage","component","Button","colorScheme","List","styled","_templateObject","_taggedTemplateLiteral","ItemsWrap","ContactList","_templateObject2","selectVisibleItems","map","item","onClick","id","deleteContact","Filter","filter","selectFilter","value","onChange","target","changeFiltervalue","Contacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Flex","className","h","flexDirection"],"sourceRoot":""}